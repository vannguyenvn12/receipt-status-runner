const pool = require('./db/db');
const { extractNoticeDate, callUscisApi } = require('./uscisApi'); // ch·ªânh path n·∫øu kh√°c

function sleep(ms) {
  return new Promise((resolve) => setTimeout(resolve, ms));
}

/**
 * Ki·ªÉm tra v√† s·ª≠a notice_date cho 1 receipt:
 * - N·∫øu notice_date NULL ho·∫∑c kh√°c v·ªõi ng√†y tr√≠ch t·ª´ action_desc
 *   ‚Üí g·ªçi API, l·∫•y action_desc/notice_date m·ªõi, r·ªìi UPDATE.
 */
async function fixMismatchNoticeDate(receiptNumber) {
  const [[row]] = await pool.query(
    `SELECT receipt_number, action_desc, notice_date 
     FROM uscis 
     WHERE receipt_number = ? 
     LIMIT 1`,
    [receiptNumber]
  );

  if (!row) {
    console.warn(`‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y receipt: ${receiptNumber}`);
    return { updated: false, reason: 'not_found' };
  }

  const currentNotice = row.notice_date || null;
  const extractedLocal = row.action_desc
    ? extractNoticeDate(row.action_desc)
    : null;

  const isMismatch =
    currentNotice === null ||
    (extractedLocal && currentNotice !== extractedLocal);

  if (!isMismatch) {
    // ƒê√£ ƒë√∫ng r·ªìi, kh√¥ng c·∫ßn g·ªçi API
    return { updated: false, reason: 'already_correct', currentNotice };
  }

  // üöÄ G·ªçi API khi mismatch/null
  const api = await callUscisApi(receiptNumber);
  if (api.error || api.wait) {
    console.warn(
      `‚ö†Ô∏è API ch∆∞a s·∫µn s√†ng/ l·ªói cho ${receiptNumber}: ${api.message || 'wait'}`
    );
    return { updated: false, reason: api.wait ? 'api_wait' : 'api_error' };
  }

  // L·∫•y notice t·ª´ API (∆∞u ti√™n field ƒë√£ parse s·∫µn), fallback tr√≠ch l·∫°i t·ª´ action_desc m·ªõi
  const freshActionDesc = api.action_desc || row.action_desc || '';
  const freshNotice =
    api.notice_date || extractNoticeDate(freshActionDesc) || null;

  if (!freshNotice) {
    console.warn(
      `‚ö†Ô∏è Kh√¥ng tr√≠ch ƒë∆∞·ª£c notice_date sau khi g·ªçi API: ${receiptNumber}`
    );
    return { updated: false, reason: 'no_date_after_api' };
  }

  // ‚úÖ Update DB: notice_date + ƒë·ªìng b·ªô action_desc v√† response_json ƒë·ªÉ nh·∫•t qu√°n
  await pool.query(
    `UPDATE uscis 
       SET notice_date = ?, 
           action_desc = ?, 
           status_en = COALESCE(?, status_en),
           updated_at = NOW(),
           response_json = ?
     WHERE receipt_number = ?`,
    [
      freshNotice,
      freshActionDesc,
      api.status_en || null,
      JSON.stringify(api.raw || {}),
      receiptNumber,
    ]
  );

  console.log(
    `‚úÖ Fixed notice_date: ${receiptNumber} | old=${
      currentNotice || 'NULL'
    } ‚Üí new=${freshNotice}`
  );

  return {
    updated: true,
    old: currentNotice,
    new: freshNotice,
    reason: currentNotice === null ? 'was_null' : 'mismatch_fixed',
  };
}

/**
 * Qu√©t h√†ng lo·∫°t:
 * - Log s·ªë d√≤ng sai c·∫ßn update (n)
 * - G·ªçi API & c·∫≠p nh·∫≠t cho t·ª´ng d√≤ng mismatch/null
 * @param {{limit?: number, delayMs?: number}} opts
 */
async function fixAllMismatchNoticeDates({ limit = 200, delayMs = 500 } = {}) {
  // L·∫•y c√°c d√≤ng c√≥ kh·∫£ nƒÉng sai: notice_date IS NULL ho·∫∑c c√≥ action_desc ƒë·ªÉ tr√≠ch
  const [rows] = await pool.query(
    `SELECT receipt_number, action_desc, notice_date
     FROM uscis
     WHERE notice_date IS NULL 
        OR (action_desc IS NOT NULL AND action_desc <> '')
     ORDER BY updated_at DESC
     LIMIT ?`,
    [limit]
  );

  let needUpdateCount = 0;
  let updatedCount = 0;

  // X√°c ƒë·ªãnh tr∆∞·ªõc c√°c d√≤ng c·∫ßn update (ƒë·ªÉ log n d√≤ng sai)
  const candidates = [];
  for (const r of rows) {
    const extracted = r.action_desc ? extractNoticeDate(r.action_desc) : null;
    const mismatch =
      r.notice_date === null || (extracted && r.notice_date !== extracted);

    if (mismatch) {
      needUpdateCount++;
      candidates.push({
        receipt_number: r.receipt_number,
        old: r.notice_date || 'NULL',
        extracted: extracted || 'N/A',
      });
    }
  }

  // üìã Log n d√≤ng sai c·∫ßn update
  if (needUpdateCount > 0) {
    console.log(`üìä T·ªïng s·ªë d√≤ng sai c·∫ßn update: ${needUpdateCount}`);
    // Log chi ti·∫øt (gi·ªõi h·∫°n 50 d√≤ng cho g·ªçn log)
    const preview = candidates.slice(0, 50);
    preview.forEach((c, i) => {
      console.log(
        `‚ùå [${i + 1}] ${c.receipt_number} | old=${c.old} | extracted(local)=${
          c.extracted
        }`
      );
    });
    if (candidates.length > preview.length) {
      console.log(`... v√† ${candidates.length - preview.length} d√≤ng kh√°c`);
    }
  } else {
    console.log('‚úÖ Kh√¥ng c√≥ d√≤ng n√†o sai c·∫ßn update.');
    return { needUpdateCount: 0, updatedCount: 0 };
  }

  // Th·ª±c s·ª± update b·∫±ng c√°ch g·ªçi API khi mismatch
  for (const c of candidates) {
    const res = await fixMismatchNoticeDate(c.receipt_number);
    if (res.updated) updatedCount++;
    // tr√°nh spam API
    if (delayMs > 0) await sleep(delayMs);
  }

  console.log(`‚úÖ ƒê√£ update: ${updatedCount}/${needUpdateCount}`);

  return { needUpdateCount, updatedCount };
}

module.exports = {
  fixMismatchNoticeDate,
  fixAllMismatchNoticeDates,
};
